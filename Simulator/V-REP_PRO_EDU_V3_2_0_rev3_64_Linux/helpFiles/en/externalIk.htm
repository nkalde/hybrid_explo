<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>External kinematics</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>External kinematics (<a href="auxiliaryApiOverview.htm">auxiliary API</a>)</h1>

<p>This collection of functions allows to perform the same kinematic calculations as you are able to do from within V-REP. Exception to this is the obstacle avoidance functionality which is only supported from within V-REP.</p>

<p>The idea is to normally build your kinematic tasks inside V-REP, then to export the kinematic content of a scene, which can then directly be used with the embeddable functions below. The required source code is located in the <em>programming/externalIk</em> folder. Make sure to include all files into your project, and include <em>extIk.h</em> in the files where you need access to the functions. Make also sure you know how to use the kinematics functionality from within V-REP first! If you have access to the <a href="apiOverview.htm">regular API</a>, then you won't need this auxiliary API, since all following functions have their <a href="apiFunctionListCategory.htm#generalIkFunctionality">regular API equivalent</a>.</p>

<p>The external IK source code is not directly part of V-REP, and carries separate licensing conditions. Refer to the source code header sections for details.</p>

<p>Follow the method below to perform kinematic calculations from within your own external application:</p>
<li>Build your kinematic tasks within V-REP. Test them.</li>
<li>Export the kinematic content of the scene with  [Menu bar --&gt; File --&gt; Export --&gt;  IK content...]</li>
<li>Include the external kinematics code in your own application (the code is located in the <em>programming/externalIk</em> folder)</li>
<li>Call <a href="#simEmbLaunch">simEmbLaunch</a> at application start-up, and <a href="#simEmbShutDown">simEmbShutDown</a> at application end.</li>
<li>Call <a href="#simEmbStart">simEmbStart</a> to import the previously exported file. simEmbStart may be called as often as desired to reset the kinematic scene. A kinematic scene is similar to a scene in V-REP, except that it is stripped of everything non-kinematic.</li>
<li>Call various functions to shift / rotate the target dummies (e.g. with <a href="#simEmbSetObjectTransformation">simEmbSetObjectTransformation</a>), or to move non-active joints, i.e. joints that are not in IK mode (e.g. with <a href="#simEmbSetJointPosition">simEmbSetJointPosition</a>).</li>
<li>Call <a href="#simEmbHandleIkGroup">simEmbHandleIkGroup</a> to perform one calculation pass (i.e. effectively bringing dummy tips onto their targets).</li>
<li>Repeat above last 2 steps as often as required. Make sure to check for return values to detect errors.</li>

<p>Refer also to the example application <em>programming/externalIkDemo</em>. That demo application uses the external kinematics routines described here, combined with the <a href="remoteApiOverview.htm">remote API</a> functionality to control the IRB 360 &quot;delta&quot; robot in inverse kinematics mode. The demo scene &quot;externalIkDemo.ttt&quot; launches the <em>externalIkDemo</em> automatically.</p>

<pre class=lightGreyBox>
<a href="#simEmbEulerAnglesToQuaternion">simEmbEulerAnglesToQuaternion</a>
<a href="#simEmbGetIkGroupHandle">simEmbGetIkGroupHandle</a>
<a href="#simEmbGetJointPosition">simEmbGetJointPosition</a>
<a href="#simEmbGetJointTransformation">simEmbGetJointTransformation</a>
<a href="#simEmbGetObjectHandle">simEmbGetObjectHandle</a>
<a href="#simEmbGetObjectParent">simEmbGetObjectParent</a>
<a href="#simEmbGetObjectTransformation">simEmbGetObjectTransformation</a>
<a href="#simEmbGetRotationAxis">simEmbGetRotationAxis</a>
<a href="#simEmbHandleIkGroup">simEmbHandleIkGroup</a>
<a href="#simEmbInterpolateTransformations">simEmbInterpolateTransformations</a>
<a href="#simEmbInvertTransformation">simEmbInvertTransformation</a>
<a href="#simEmbLaunch">simEmbLaunch</a>
<a href="#simEmbMultiplyTransformations">simEmbMultiplyTransformations</a>
<a href="#simEmbMultTransformationWithVector">simEmbMultTransformationWithVector</a>
<a href="#simEmbQuaternionToEulerAngles">simEmbQuaternionToEulerAngles</a>
<a href="#simEmbRotateAroundAxis">simEmbRotateAroundAxis</a>
<a href="#simEmbSetIkElementProperties">simEmbSetIkElementProperties</a>
<a href="#simEmbSetIkGroupExplicitHandling">simEmbSetIkGroupExplicitHandling</a>
<a href="#simEmbSetIkGroupProperties">simEmbSetIkGroupProperties</a>
<a href="#simEmbSetJointMode">simEmbSetJointMode</a>
<a href="#simEmbSetJointPosition">simEmbSetJointPosition</a>
<a href="#simEmbSetObjectParent">simEmbSetObjectParent</a>
<a href="#simEmbSetObjectTransformation">simEmbSetObjectTransformation</a>
<a href="#simEmbSetSphericalJointQuaternion">simEmbSetSphericalJointQuaternion</a>
<a href="#simEmbShutDown">simEmbShutDown</a>
<a href="#simEmbStart">simEmbStart</a>
</pre>

<br>
<br>
<br>




<h3 class=subsectionBar>
<a name="simEmbEulerAnglesToQuaternion" id="simEmbEulerAnglesToQuaternion"></a>simEmbEulerAnglesToQuaternion (regular API equivalent: <a href="apiFunctions.htm#simGetEulerAnglesFromMatrix">simGetEulerAnglesFromMatrix</a>)
</h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves a quaternion based on <a href="eulerAngles.htm">Euler angles</a>. See also <a href="#simEmbQuaternionToEulerAngles">simEmbQuaternionToEulerAngles</a></td>
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCSyn>
C++ synopsis
</td> 
<td class=auxApiTableRightCSyn>int simEmbEulerAnglesToQuaternion(const float* euler,float* quaternion)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCParam>parameters</td> 
<td class=auxApiTableRightCParam>
<div><strong>euler (input)</strong>: the 3 Euler angles (alpha, beta, gamma)</div>
<div><strong>quaternion (output)</strong>: the 4 values of a quaternion (x, y, z, w)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCRet>
return value
</td> 
<td class=auxApiTableRightCRet>
<div>-1 if operation failed</div>
</td> 
</tr> 
</table> 
<br>
















<h3 class=subsectionBar>
<a name="simEmbGetIkGroupHandle" id="simEmbGetIkGroupHandle"></a>simEmbGetIkGroupHandle (regular API equivalent: <a href="apiFunctions.htm#simGetIkGroupHandle">simGetIkGroupHandle</a>) </h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves the handle of an IK group based on its name. Specify the full IK group name, including suffixes.</td>
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCSyn>
C++ synopsis
</td> 
<td class=auxApiTableRightCSyn>int simEmbGetIkGroupHandle(const char* ikGroupName)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCParam>parameters</td> 
<td class=auxApiTableRightCParam>
<div><strong>ikGroupName (input)</strong>: the name of the IK group</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCRet>
return value
</td> 
<td class=auxApiTableRightCRet>
<div>-1 if operation failed, otherwise the handle of the IK group.</div>
</td> 
</tr> 
</table> 
<br>
















<h3 class=subsectionBar>
<a name="simEmbGetJointPosition" id="simEmbGetJointPosition"></a>simEmbGetJointPosition (regular API equivalent: <a href="apiFunctions.htm#simGetJointPosition">simGetJointPosition</a>) </h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves the intrinsic position of a joint. This function cannot be used with spherical joints (use <a href="#simEmbGetJointTransformation">simEmbGetJointTransformation</a> instead). See also <a href="#simEmbSetJointPosition">simEmbSetJointPosition</a></td>
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCSyn>
C++ synopsis
</td> 
<td class=auxApiTableRightCSyn>int simEmbGetJointPosition(int jointHandle,float* position)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCParam>parameters</td> 
<td class=auxApiTableRightCParam>
<div><strong>jointHandle (input)</strong>: handle of the joint</div>
<div><strong>position (output)</strong>: intrinsic position of the joint. This is a one-dimensional value: if the   joint is revolute, the rotation angle is returned, if the joint is   prismatic, the translation amount is returned, etc.</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCRet>
return value
</td> 
<td class=auxApiTableRightCRet>
<div>-1 if operation failed</div>
</td> 
</tr> 
</table> 
<br>
















<h3 class=subsectionBar>
<a name="simEmbGetJointTransformation" id="simEmbGetJointTransformation"></a>simEmbGetJointTransformation (regular API equivalent: <a href="apiFunctions.htm#simGetJointMatrix">simGetJointMatrix</a>) </h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves the intrinsic transformation of a joint (the transformation caused by the joint movement). See also <a href="#simEmbSetSphericalJointQuaternion">simEmbSetSphericalJointQuaternion</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCSyn>
C++ synopsis
</td> 
<td class=auxApiTableRightCSyn>int simEmbGetJointTransformation(int jointHandle,float* position,float* quaternion)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCParam>parameters</td> 
<td class=auxApiTableRightCParam>
<div><strong>jointHandle (input)</strong>: handle of the joint</div>
<div><strong>position (output)</strong>: the position component of the transformation (x, y, z)</div>
<div><strong>quaternion (output)</strong>: the orientation component of the transformation (x, y, z, w)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCRet>
return value
</td> 
<td class=auxApiTableRightCRet>
<div>-1 if operation failed</div>
</td> 
</tr> 
</table> 
<br>
















<h3 class=subsectionBar>
<a name="simEmbGetObjectHandle" id="simEmbGetObjectHandle"></a>simEmbGetObjectHandle (regular API equivalent: <a href="apiFunctions.htm#simGetObjectHandle">simGetObjectHandle</a>) </h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves an object handle based on its name. Specify the full object name, including suffixes.</td>
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCSyn>
C++ synopsis
</td> 
<td class=auxApiTableRightCSyn>int simEmbGetObjectHandle(const char* objectName)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCParam>parameters</td> 
<td class=auxApiTableRightCParam>
<div><strong>objectName (input)</strong>: name of the object</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCRet>
return value
</td> 
<td class=auxApiTableRightCRet>
<div>-1 if operation failed, otherwise the handle of the object</div>
</td> 
</tr> 
</table> 
<br>
















<h3 class=subsectionBar>
<a name="simEmbGetObjectParent" id="simEmbGetObjectParent"></a>simEmbGetObjectParent (regular API equivalent: <a href="apiFunctions.htm#simGetObjectParent">simGetObjectParent</a>) </h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves the handle of an object's parent object. See also <a href="#simEmbSetObjectParent">simEmbSetObjectParent</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCSyn>
C++ synopsis
</td> 
<td class=auxApiTableRightCSyn>int simEmbGetObjectParent(int objectHandle)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCParam>parameters</td> 
<td class=auxApiTableRightCParam>
<div><strong>objectHandle (input)</strong>: handle of the object</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCRet>
return value
</td> 
<td class=auxApiTableRightCRet>
<div>-1 if operation failed, otherwise the handle of the parent object</div>
</td> 
</tr> 
</table> 
<br>
















<h3 class=subsectionBar>
<a name="simEmbGetObjectTransformation" id="simEmbGetObjectTransformation"></a>simEmbGetObjectTransformation (regular API equivalent: <a href="apiFunctions.htm#simGetObjectMatrix">simGetObjectMatrix</a>) </h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves the transformation (position / orientation) of an object. See also <a href="#simEmbSetObjectTransformation">simEmbSetObjectTransformation</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCSyn>
C++ synopsis
</td> 
<td class=auxApiTableRightCSyn>int simEmbGetObjectTransformation(int objectHandle,int relativeToObjectHandle,float* position,float* quaternion)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCParam>parameters</td> 
<td class=auxApiTableRightCParam>
<div><strong>objectHandle (input)</strong>: handle of the object</div>
<div><strong>relativeToObjectHandle (input)</strong>: indicates relative to which reference frame we want the transformation. Specify   -1 to retrieve the absolute transformation, sim_handle_parent to   retrieve the transformation relative to the object's parent, or   an object handle relative to whose reference frame we want the   transformation.</div>
<div><strong>position (output)</strong>: the position component of the transformation (x, y, z)</div>
<div><strong>quaternion (output)</strong>: the orientation component of the transformation (x, y, z, w)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCRet>
return value
</td> 
<td class=auxApiTableRightCRet>
<div>-1 if operation failed</div>
</td> 
</tr> 
</table> 
<br>
















<h3 class=subsectionBar>
<a name="simEmbGetRotationAxis" id="simEmbGetRotationAxis"></a>simEmbGetRotationAxis (regular API equivalent: <a href="apiFunctions.htm#simGetRotationAxis">simGetRotationAxis</a>)
</h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves an axis and rotation angle that brings one transformation onto another one. The translation part of the transformations is ignored. This function, when used in combination with <a href="#simEmbRotateAroundAxis">simEmbRotateAroundAxis</a>, can be used to build interpolations between transformations.</td>
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCSyn>
C++ synopsis
</td> 
<td class=auxApiTableRightCSyn>int simEmbGetRotationAxis(const float* positionStart,const float* quaternionStart,const float* positionGoal,const float* quaternionGoal,float* axis,float* angle)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCParam>parameters</td> 
<td class=auxApiTableRightCParam>
<div><strong>positionStart (input)</strong>: the position component of the first transformation (x, y, z)</div>
<div><strong>quaternionStart (input)</strong>: the orientation component of the first transformation (x, y, z, w)</div>
<div><strong>positionGoal (input)</strong>: the position component of the second transformation (x, y, z)</div>
<div><strong>quaternionGoal (input)</strong>:  the orientation component of the second transformation (x, y, z, w)</div>
<div><strong>axis (output)</strong>: the rotation axis (x, y, z vector)</div>
<div><strong>angle (output)</strong>: the rotation angle</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCRet>
return value
</td> 
<td class=auxApiTableRightCRet>
<div>-1 if operation failed</div>
</td> 
</tr> 
</table> 
<br>
















<h3 class=subsectionBar>
<a name="simEmbHandleIkGroup" id="simEmbHandleIkGroup"></a>simEmbHandleIkGroup (regular API equivalent: <a href="apiFunctions.htm#simHandleIkGroup">simHandleIkGroup</a>) </h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Handles (i.e. solves) an IK group (i.e. by trying to respect the given constraints).</td>
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCSyn>
C++ synopsis
</td> 
<td class=auxApiTableRightCSyn>int simEmbHandleIkGroup(int ikGroupHandle)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCParam>parameters</td> 
<td class=auxApiTableRightCParam>
<div><strong>ikGroupHandle (input)</strong>: handle of the IK group or sim_handle_all or   sim_handle_all_except_explicit. (sim_handle_all will handle all IK   groups, while sim_handle_all_except_explicit will only handle those that   are not marked as "explicit handling")</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCRet>
return value
</td> 
<td class=auxApiTableRightCRet>
<div>number of performed calculations (i.e. when IK group calculation results are   different from sim_ikresult_not_performed) if no specific IK group was   specified, or a value of type <a href="apiConstants.htm#ikCalculationResults">IK result</a> if a specific IK group was specified, -1 in case of an error (a failed IK group calculation is not considered as an error)</div>
</td> 
</tr> 
</table> 
<br>
















<h3 class=subsectionBar>
<a name="simEmbInterpolateTransformations" id="simEmbInterpolateTransformations"></a>simEmbInterpolateTransformations (regular API equivalent: <a href="apiFunctions.htm#simInterpolateMatrices">simInterpolateMatrices</a>)
</h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Computes the interpolated transformation between 2 transformations.</td>
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCSyn>
C++ synopsis
</td> 
<td class=auxApiTableRightCSyn>int simEmbInterpolateTransformations(const float* position1,const float* quaternion1,const float* position2,const float* quaternion2,float interpolFactor,float* positionOut,float* quaternionOut)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCParam>parameters</td> 
<td class=auxApiTableRightCParam>
<div><strong>position1 (input)</strong>: the position component of the first transformation (x, y, z)</div>
<div><strong>quaternion1 (input)</strong>: the orientation component of the first transformation (x, y, z, w)</div>
<div><strong>position2 (input)</strong>: the position component of the second transformation (x, y, z)</div>
<div><strong>quaternion2 (input)</strong>: the orientation component of the second transformation (x, y, z, w)</div>
<div><strong>interpolFactor (input)</strong>: the interpolation factor, a value between 0.0 and 1.0 (0.0--&gt; transformationOut=transformationIn1, 1.0--&gt; transformationOut=transformationIn2)</div>
<div><strong>positionOut (output)</strong>: the position component of the interpolated transformation (x, y, z)</div>
<div><strong>quaternionOut (output)</strong>: the orientation component of the interpolated transformation (x, y, z, w)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCRet>
return value
</td> 
<td class=auxApiTableRightCRet>
<div>-1 if operation failed</div>
</td> 
</tr> 
</table> 
<br>
















<h3 class=subsectionBar>
<a name="simEmbInvertTransformation" id="simEmbInvertTransformation"></a>simEmbInvertTransformation (regular API equivalent: <a href="apiFunctions.htm#simInvertMatrix">simInvertMatrix</a>)
</h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Inverts a transformation matrix</td>
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCSyn>
C++ synopsis
</td> 
<td class=auxApiTableRightCSyn>int simEmbInvertTransformation(float* position,float* quaternion);</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCParam>parameters</td> 
<td class=auxApiTableRightCParam>
<div><strong>position (input/output)</strong>: the position component of the transformation (x, y, z)</div>
<div><strong>quaternion (input/output)</strong>: the orientation component of the transformation (x, y, z, w)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCRet>
return value
</td> 
<td class=auxApiTableRightCRet>
<div>-1 if operation failed</div>
</td> 
</tr> 
</table> 
<br>
















<h3 class=subsectionBar>
<a name="simEmbLaunch" id="simEmbLaunch"></a>simEmbLaunch
</h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Initializes the external kinematics routines. Should be the very first function called. See also <a href="#simEmbShutDown">simEmbShutDown</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCSyn>
C++ synopsis
</td> 
<td class=auxApiTableRightCSyn>bool simEmbLaunch()</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCParam>parameters</td> 
<td class=auxApiTableRightCParam>
<div>none</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCRet>
return value
</td> 
<td class=auxApiTableRightCRet>
<div>false if operation failed.</div>
</td> 
</tr> 
</table> 
<br>
















<h3 class=subsectionBar>
<a name="simEmbMultiplyTransformations" id="simEmbMultiplyTransformations"></a>simEmbMultiplyTransformations (regular API equivalent: <a href="apiFunctions.htm#simMultiplyMatrices">simMultiplyMatrices</a>)
</h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Multiplies two transformation</td>
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCSyn>
C++ synopsis
</td> 
<td class=auxApiTableRightCSyn>int simEmbMultiplyTransformations(const float* position1,const float* quaternion1,const float* position2,const float* quaternion2,float* positionOut,float* quaternionOut);</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCParam>parameters</td> 
<td class=auxApiTableRightCParam>
<div><strong>position1 (input)</strong>: the position component of the first transformation (x, y, z)</div>
<div><strong>quaternion1 (input)</strong>: the orientation component of the first transformation (x, y, z, w)</div>
<div><strong>position2 (input)</strong>: the position component of the second transformation (x, y, z)</div>
<div><strong>quaternion2 (input)</strong>: the orientation component of the second transformation (x, y, z, w)</div>
<div><strong>positionOut (output)</strong>: the position component of the multiplication (x, y, z)</div>
<div><strong>quaternionOut (output)</strong>: the orientation component of the multiplication (x, y, z, w)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCRet>
return value
</td> 
<td class=auxApiTableRightCRet>
<div>-1 if operation failed</div>
</td> 
</tr> 
</table> 
<br>
















<h3 class=subsectionBar>
<a name="simEmbMultTransformationWithVector" id="simEmbMultTransformationWithVector"></a>simEmbMultTransformationWithVector (regular API equivalent: <a href="apiFunctions.htm#simTransformVector">simTransformVector</a>)
</h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Multiplies a vector with a transformation (v=tr*v)</td>
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCSyn>
C++ synopsis
</td> 
<td class=auxApiTableRightCSyn>int simEmbMultTransformationWithVector(const float* position,const float* quaternion,float* vect);</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCParam>parameters</td> 
<td class=auxApiTableRightCParam>
<div><strong>position (input)</strong>: the position component of the transformation (x, y, z)</div>
<div><strong>quaternion (input)</strong>: the orientation component of the transformation (x, y, z, w)</div>
<div><strong>vect (input/output)</strong>: the vector to transform (x, y, z)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCRet>
return value
</td> 
<td class=auxApiTableRightCRet>
<div>-1 if operation failed</div>
</td> 
</tr> 
</table> 
<br>
















<h3 class=subsectionBar>
<a name="simEmbQuaternionToEulerAngles" id="simEmbQuaternionToEulerAngles"></a>simEmbQuaternionToEulerAngles (regular API equivalent: <a href="apiFunctions.htm#simGetQuaternionFromMatrix">simGetQuaternionFromMatrix</a>)
</h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves <a href="eulerAngles.htm">Euler angles</a> based on a quaternion. See also <a href="#simEmbEulerAnglesToQuaternion">simEmbEulerAnglesToQuaternion</a></td>
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCSyn>
C++ synopsis
</td> 
<td class=auxApiTableRightCSyn>int simEmbQuaternionToEulerAngles(const float* quaternion,float* euler)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCParam>parameters</td> 
<td class=auxApiTableRightCParam>
<div><strong>quaternion (input)</strong>: the 4 values of a quaternion (x, y, z, w)</div>
<div><strong>euler (output)</strong>: the 3 Euler angles (alpha, beta, gamma)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCRet>
return value
</td> 
<td class=auxApiTableRightCRet>
<div>-1 if operation failed</div>
</td> 
</tr> 
</table> 
<br>
















<h3 class=subsectionBar>
<a name="simEmbRotateAroundAxis" id="simEmbRotateAroundAxis"></a>simEmbRotateAroundAxis (regular API equivalent: <a href="apiFunctions.htm#simRotateAroundAxis">simRotateAroundAxis</a>)
</h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Rotates a transformation around a specific axis in space. This function, when used in combination with <a href="#simEmbGetRotationAxis">simEmbGetRotationAxis</a>, can be used to build interpolations between transformations.</td>
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCSyn>
C++ synopsis
</td> 
<td class=auxApiTableRightCSyn>int simEmbRotateAroundAxis(const float* positionIn,const float* quaternionIn,const float* axisVector,const float* axisPosition,float angle,float* positionOut,float* quaternionOut)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCParam>parameters</td> 
<td class=auxApiTableRightCParam>
<div><strong>positionIn (input)</strong>: the position component of a transformation (x, y, z)</div>
<div><strong>quaternionIn (input)</strong>: the orientation component of a transformation (x, y, z, w)</div>
<div><strong>axisVector (input)</strong>: the axis vector (x, y, z)</div>
<div><strong>axisPosition (input)</strong>: the axis position (x, y, z)</div>
<div><strong>angle (input)</strong>: the desired rotation angle</div>
<div><strong>positionOut (output)</strong>: the position component of the rotated transformation (x, y, z)</div>
<div><strong>quaternionOut (output)</strong>: the orientation component of the rotated transformation (x, y, z, w)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCRet>
return value
</td> 
<td class=auxApiTableRightCRet>
<div>-1 if operation failed</div>
</td> 
</tr> 
</table> 
<br>







<h3 class=subsectionBar>
<a name="simEmbSetIkElementProperties" id="simEmbSetIkElementProperties"></a>simEmbSetIkElementProperties (regular API equivalent: <a href="apiFunctions.htm#simSetIkElementProperties">simSetIkElementProperties</a>) </h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets properties of a specific IK element. See also <a href="#simEmbSetIkGroupProperties">simEmbSetIkGroupProperties</a> and <a href="#simEmbGetIkGroupHandle">simEmbGetIkGroupHandle</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCSyn>
C++ synopsis
</td> 
<td class=auxApiTableRightCSyn>int simEmbSetIkElementProperties(int ikGroupHandle,int tipDummyHandle,int constraints,const float* precision,const float* weight)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCParam>parameters</td> 
<td class=auxApiTableRightCParam>
<div><strong>ikGroupHandle (input)</strong>: handle of the IK group</div>
<div><strong>tipDummyHandle (input)</strong>: handle of the tip dummy object of the IK element</div>
<div><strong>constraints (input)</strong>: the <a href="apiConstants.htm#ikConstraints">constraints</a> of the ik element. sim_ik_avoidance_constraint is not allowed</div>
<div><strong>precision (input)</strong>: an array of two values where the first represents the linear precision,   and the second the angular precision. Can be NULL to keep current   settings.</div>
<div><strong>weight (input)</strong>: an array of two values that represent the linear and angular resolution weights. Can be NULL to keep current settings</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCRet>
return value
</td> 
<td class=auxApiTableRightCRet>
<div>-1 if operation failed</div>
</td> 
</tr> 
</table> 
<br>
















<h3 class=subsectionBar>
<a name="simEmbSetIkGroupExplicitHandling" id="simEmbSetIkGroupExplicitHandling"></a>simEmbSetIkGroupExplicitHandling (regular API equivalent: <a href="apiFunctions.htm#simSetExplicitHandling">simSetExplicitHandling</a>) </h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets the explicit handling flags for an IK group. An IK group flagged as &quot;explicit handling&quot; will only be handled or solved when called explicitely with <a href="#simEmbHandleIkGroup">simEmbHandleIkGroup</a>(ikGroupHandle) or simEmbHandleIkGroup(sim_handle_all).</td>
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCSyn>
C++ synopsis
</td> 
<td class=auxApiTableRightCSyn>int simEmbSetIkGroupExplicitHandling(int ikGroupHandle,bool explicitHandling)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCParam>parameters</td> 
<td class=auxApiTableRightCParam>
<div><strong>ikGroupHandle (input)</strong>: handle of the IK group</div>
<div><strong>explicitHandling (input)</strong>: the desired explicit handling state</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCRet>
return value
</td> 
<td class=auxApiTableRightCRet>
<div>-1 if operation failed</div>
</td> 
</tr> 
</table> 
<br>
















<h3 class=subsectionBar>
<a name="simEmbSetIkGroupProperties" id="simEmbSetIkGroupProperties"></a>simEmbSetIkGroupProperties (regular API equivalent: <a href="apiFunctions.htm#simSetIkGroupProperties">simSetIkGroupProperties</a>) </h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets properties of an IK group. See also <a href="#simEmbSetIkElementProperties">simEmbSetIkElementProperties</a></td>
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCSyn>
C++ synopsis
</td> 
<td class=auxApiTableRightCSyn>int simEmbSetIkGroupProperties(int ikGroupHandle,int resolutionMethod,int maxIterations,float damping)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCParam>parameters</td> 
<td class=auxApiTableRightCParam>
<div><strong>ikGroupHandle (input)</strong>: handle of the IK group</div>
<div><strong>resolutionMethod (input)</strong>: the <a href="apiConstants.htm#ikCalculationMethods">IK resolution method</a></div>
<div><strong>maxIterations (input)</strong>: the maximum number of iterations for the calculations</div>
<div><strong>damping (input)</strong>: the DLS damping factor</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCRet>
return value
</td> 
<td class=auxApiTableRightCRet>
<div>-1 if operation failed</div>
</td> 
</tr> 
</table> 
<br>
















<h3 class=subsectionBar>
<a name="simEmbSetJointMode" id="simEmbSetJointMode"></a>simEmbSetJointMode (regular API equivalent: <a href="apiFunctions.htm#simSetJointMode">simSetJointMode</a>) </h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets the operation mode of a joint. Might have as side-effect the change of additional properties of the joint.</td>
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCSyn>
C++ synopsis
</td> 
<td class=auxApiTableRightCSyn>int simEmbSetJointMode(int jointHandle,int jointMode)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCParam>parameters</td> 
<td class=auxApiTableRightCParam>
<div><strong>jointHandle (input)</strong>: handle of the joint</div>
<div><strong>jointMode (input)</strong>: a <a href="apiConstants.htm#jointModes">joint mode</a> value</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCRet>
return value
</td> 
<td class=auxApiTableRightCRet>
<div>-1 if operation failed</div>
</td> 
</tr> 
</table> 
<br>
















<h3 class=subsectionBar>
<a name="simEmbSetJointPosition" id="simEmbSetJointPosition"></a>simEmbSetJointPosition (regular API equivalent: <a href="apiFunctions.htm#simSetJointPosition">simSetJointPosition</a>) </h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets the intrinsic position of a joint. This function cannot be used with spherical joints (use <a href="#simEmbSetSphericalJointQuaternion">simEmbSetSphericalJointQuaternion</a> instead). See also <a href="#simEmbGetJointPosition">simEmbGetJointPosition</a></td>
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCSyn>
C++ synopsis
</td> 
<td class=auxApiTableRightCSyn>int simEmbSetJointPosition(int jointHandle,float position)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCParam>parameters</td> 
<td class=auxApiTableRightCParam>
<div><strong>jointHandle (input)</strong>: handle of the joint</div>
<div><strong>position (input)</strong>: position of the joint (angular or linear value depending on the joint type)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCRet>
return value
</td> 
<td class=auxApiTableRightCRet>
<div>-1 if operation failed</div>
</td> 
</tr> 
</table> 
<br>
















<h3 class=subsectionBar>
<a name="simEmbSetObjectParent" id="simEmbSetObjectParent"></a>simEmbSetObjectParent (regular API equivalent: <a href="apiFunctions.htm#simSetObjectParent">simSetObjectParent</a>) </h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets an  object's parent object. See also <a href="#simEmbGetObjectParent">simEmbGetObjectParent</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCSyn>
C++ synopsis
</td> 
<td class=auxApiTableRightCSyn>int simEmbSetObjectParent(int objectHandle,int parentObjectHandle,bool keepInPlace)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCParam>parameters</td> 
<td class=auxApiTableRightCParam>
<div><strong>objectHandle (input)</strong>: handle of the object that will become child of the parent object</div>
<div><strong>parentObjectHandle (input)</strong>: handle of the object that will become parent, or -1 if the object should become parentless</div>
<div><strong>keepInPlace (input)</strong>: indicates whether the object's absolute position and orientation should stay same</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCRet>
return value
</td> 
<td class=auxApiTableRightCRet>
<div>-1 if operation failed</div>
</td> 
</tr> 
</table> 
<br>
















<h3 class=subsectionBar>
<a name="simEmbSetObjectTransformation" id="simEmbSetObjectTransformation"></a>simEmbSetObjectTransformation (regular API equivalent: <a href="apiFunctions.htm#simSetObjectMatrix">simSetObjectMatrix</a>) </h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets the transformation (position / orientation) of an object. See also <a href="#simEmbGetObjectTransformation">simEmbGetObjectTransformation</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCSyn>
C++ synopsis
</td> 
<td class=auxApiTableRightCSyn>int simEmbSetObjectTransformation(int objectHandle,int relativeToObjectHandle,const float* position,const float* quaternion)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCParam>parameters</td> 
<td class=auxApiTableRightCParam>
<div><strong>objectHandle (input)</strong>: handle of the object</div>
<div><strong>relativeToObjectHandle (input)</strong>: indicates relative to which reference frame the transformation is specified. Specify -1 to set the absolute transformation, sim_handle_parent   to set the transformation relative to the object's parent, or an   object handle relative to whose reference frame the transformation   is specified.</div>
<div><strong>position (input)</strong>: the position component of the transformation (x, y, z)</div>
<div><strong>quaternion (input)</strong>: the orientation component of the transformation (x, y, z, w)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCRet>
return value
</td> 
<td class=auxApiTableRightCRet>
<div>-1 if operation failed</div>
</td> 
</tr> 
</table> 
<br>
















<h3 class=subsectionBar>
<a name="simEmbSetSphericalJointQuaternion" id="simEmbSetSphericalJointQuaternion"></a>simEmbSetSphericalJointQuaternion (regular API equivalent: <a href="apiFunctions.htm#simSetSphericalJointMatrix">simSetSphericalJointMatrix </a>) </h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets the intrinsic quaternion of a spherical joint object. This function cannot be used with non-spherical joints (use <a href="#simEmbSetJointPosition">simEmbSetJointPosition</a> instead). See also <a href="#simEmbGetJointTransformation">simEmbGetJointTransformation</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCSyn>
C++ synopsis
</td> 
<td class=auxApiTableRightCSyn>int simEmbSetSphericalJointQuaternion(int jointHandle,const float* quaternion)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCParam>parameters</td> 
<td class=auxApiTableRightCParam>
<div><strong>jointHandle (input)</strong>: handle of the joint</div>
<div><strong>quaternion (input)</strong>: the quaternion (x, y, z, w)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCRet>
return value
</td> 
<td class=auxApiTableRightCRet>
<div>-1 if operation failed</div>
</td> 
</tr> 
</table> 
<br>
















<h3 class=subsectionBar>
<a name="simEmbShutDown" id="simEmbShutDown"></a>simEmbShutDown
</h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Deinitializes the external kinematics routines. Should be the very last function called. See also <a href="#simEmbLaunch">simEmbLaunch</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCSyn>
C++ synopsis
</td> 
<td class=auxApiTableRightCSyn>bool simEmbShutDown()</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCParam>parameters</td> 
<td class=auxApiTableRightCParam>
<div>none</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCRet>
return value
</td> 
<td class=auxApiTableRightCRet>
<div>false if operation failed.</div>
</td> 
</tr> 
</table> 
<br>
















<h3 class=subsectionBar>
<a name="simEmbStart" id="simEmbStart"></a>simEmbStart
</h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Imports a previously exported kinematic scene content. Can be called at any time to reset the object/joint configurations<a href="#simEmbLaunch"></a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCSyn>
C++ synopsis
</td> 
<td class=auxApiTableRightCSyn>int simEmbStart(unsigned char* data,int dataLength)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCParam>parameters</td> 
<td class=auxApiTableRightCParam>
<div><strong>data (input)</strong>: pointer to the data to import</div>
<div><strong>dataLength (input)</strong>: the size of the data to import</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=auxApiTableLeftCRet>
return value
</td> 
<td class=auxApiTableRightCRet>
<div>-1 if operation failed, otherwise the number of imported objects</div>
</td> 
</tr> 
</table> 
<br>
















<br>
<br>
 </tr>
</table> 
</div>  
  
  
</body>

</html>
