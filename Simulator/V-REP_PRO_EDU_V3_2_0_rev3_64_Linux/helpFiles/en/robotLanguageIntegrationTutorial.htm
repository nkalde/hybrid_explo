<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>Robot language interpreter integration tutorial</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>Robot language interpreter integration tutorial</h1>

<p>This tutorial will try to explain how to integrate or embed a robot language interpreter into V-REP. The procedure is very similar in case you want to integrate an emulator (e.g. a specific microcontroller emulator) into V-REP. Extending V-REP's functionality requires most of the time the development of a <a href="plugins.htm">plugin</a>. Make sure you have read the <a href="pluginTutorial.htm">tutorial on plugins</a> , and the <a href="externalControllerTutorial.htm">tutorial on external controllers</a> before proceeding with this tutorial.<br>
</p>

<p>The V-REP <a href="scenes.htm">scene</a> file related to this tutorial is located in V-REP's installation folder  &quot;scenes\robotLanguageControl.ttt&quot;. The plugin project files, and the server application project files of this tutorial are located in V-REP's installation folder  &quot;programming\v_repExtMtb&quot; and &quot;programming\mtbServer&quot;. The MTB plugin and MTB server should already be compiled in the installation directory. If you wish to recompile the plugin, remember following:</p>
<li>The plugin is a Qt project, therefore it will require the Qt framework for compilation (most other plugin projects in the programming directory are non Qt projects)</li>
<li>You are required to compile the plugin with the exact same Qt version as the one used to compile V-REP. Have a look at the V-REP [Help --&gt; About] menu bar item for details about Qt version</li>
<li>You should compile the plugin with the same compiler as  V-REP (MinGW on Windows, and GCC on Mac OSX and Linux)</li>


<p>First, let's start by loading the related scene file &quot;scenes\robotLanguageControl.ttt&quot;:<br>
</p>

<p align=center><img src="images/robLangTut1.jpg"></p>
<br>

<p>The &quot;MTB&quot; robot is an imaginary robot (&quot;MTB&quot; stands for &quot;Machine Type B&quot;), that will be controlled with an imaginary robot language. Access the plugin dialog located at [Menu bar --&gt; Plugins --&gt; MTB Robot Properties]. You will only be able to do so if the related plugin (v_repExtMtb.dll, libv_repExtMtb.dylib or libv_repExtMtb.so) was properly loaded (make sure the plugin was located in the same directory as the V-REP executable when you launched V-REP). Select an MTB robot in the <a href="scenes.htm">scene</a>. This is what the plugin dialog should display:<br>
</p>

<p align=center><img src="images/robLangTut2.jpg"></p>
<br>

<p>The plugin dialog shows all recognized MTB robots in the scene (try copy-pasting the robot). If the last selected robot is an MTB robot, then its control program (in the imaginary robot language) is displayed in the lower part of the dialog. That control program can be modified while the simulation is stopped.<br>
</p>

<p>As previously stated, the used robot language is imaginary and very very simple. Following commands are supported (one command per line, input is case-sensitive):<br>
</p>

<pre class=lightGreyBox>
"<strong>REM</strong>" starts a comment line
"<strong>SETLINVEL</strong> v": sets the prismatic joint velocity for next movements (v is in m/s)
"<strong>SETROTVEL</strong> v": sets the revolute joint velocity for next movements (v is in degrees/s)
"<strong>MOVE</strong> p1 p2 p3 p4": moves to joint positions (p1;p2;p3;p4) (in degrees except for p3 in meters)
"<strong>WAIT</strong> x": waits x milliseconds
"<strong>SETBIT</strong> y": sets the bit at position y (1-32) in the robot output port
"<strong>CLEARBIT</strong> y": clears the bit at position y (1-32) in the robot output port
"<strong>IFBITGOTO</strong> y label": if bit at position y (1-32) in the robot input port is set, jump to &quot;label&quot;
"<strong>IFNBITGOTO</strong> y label": if bit at position y (1-32) in the robot input port is not set, jump to &quot;label&quot;
"<strong>GOTO</strong> label": jumps to "label"</pre>

<p>Any word different from &quot;<strong>REM</strong>&quot;, &quot;<strong>SETLINVEL</strong>&quot;, &quot;<strong>SETROTVEL</strong>&quot;, &quot;<strong>MOVE</strong>&quot;, &quot;<strong>WAIT</strong>&quot;, &quot;<strong>SETBIT</strong>&quot;, &quot;<strong>CLEARBIT</strong>&quot;, &quot;<strong>IFBITGOTO</strong>&quot;, &quot;<strong>IFNBITGOTO</strong>&quot; and &quot;<strong>GOTO</strong>&quot; is considered to be a label. When the dialog checkbox <strong>Automatic execution</strong> is selected, then the program will execute automatically when  <a href="simulation.htm">simulation</a> starts. Now run the simulation. If the related plugin was not found, following message displays (the display of the message is handled in the <a href="childScripts.htm">child scripts</a> attached to <a href="objects.htm">objects</a> &quot;MTB_Robot&quot; and &quot;MTB_Robot#0&quot;):<br>
</p>

<p align=center><img src="images/robLangTut3.jpg"></p>
<br>

<p>If the related plugin was found, then the MTB  robot language programs will first be compiled before execution. This happens without the user noticing anything, unless the program contains an error, in which case the plugin displays following message (the display of the message is handled in the <a href="childScripts.htm">child scripts</a> attached to objects &quot;MTB_Robot&quot; and &quot;MTB_Robot#0&quot;):<br>
</p>

<p align=center><img src="images/robLangTut4.jpg"></p>
<br>

<p>If the compilation was successful, then the robots start executing their respective program. The simulation is a <em>maximum speed</em> simulation, but can  be switched to real-time simulation by toggling the related toolbar button:</p>

<p align=center><img src="images/realTimeButton.jpg"></p>

<p> The execution speed can be even more accelerated by pressing the appropriate toolbar button several times:</p>

<p align=center><img src="images/simulationAcceleration.jpg"></p>

<p>Each  MTB robot  program can be individually paused, stopped or restarted at any time via their displayed custom dialog, which are <a href="customUserInterfaces.htm">custom user interfaces</a>:<br>
</p>

<p align=center><img src="images/robLangTut5.jpg"></p>
<br>

<p>Above custom user interface is the user-interface of the MTB robot and can be fully customized. Should the MTB robot be copied, then its custom user interface will also be copied. Next to being able to controlling the program execution state, the custom user interface also displays current program line (&quot;Cmd&quot;) and the MTB's current joint values. The button located at the bottom of the custom user interface (&quot;Show input/output&quot;) allows toggling the input/output dialog:<br>
</p>

<p align=center><img src="images/robLangTut6.jpg"></p>
<br>

<p>The above custom user interface allows the user to change the robot's input port bits, and to read the robot's output port bits. Input and output ports can be read and respectively written by the robot language program. Input and output ports can also be written and read by external devices (e.g. the robot's gripper or suction pad) by using appropriate function calls (see further below).<br>
</p>


<p>There are two  small child scripts attached to the &quot;MTB_Robot&quot; and &quot;MTB_Robot#0&quot; objects. They are in charge of handling the custom dialogs (custom user interfaces) and communicating with the MTB plugin. Most code in the child scripts could be handled by the plugin too.<br>
</p>

<p>Now copy and paste one of the MTB robots. Notice how the third MTB robot appears in the plugin dialog:<br>
</p>

<p align=center><img src="images/robLangTut8.jpg"></p>
<br>

<p>Run the simulation. Notice how the third MTB robot has also an attached robot program executing. Also notice how all custom dialogs have automatically been copied too. The third robot is  actually completely independent and not aware of the others, since one would first have to connect its input/output ports to the other robots. You can also copy/paste the robots during simulation. At any time, you can also load <a href="models.htm">models</a> of other types of robots, furniture, obstacles, etc. by using the <a href="userInterface.htm#ModelBrowser">model browser</a>. Stop the simulation. At simulation stop, objects added during simulation will be removed automatically, and the initial object's position/orientation restored, but that default behaviour can be modified in the <a href="simulationPropertiesDialog.htm">simulation settings dialog</a>.<br>
</p>

<p>Try to modify an MTB robot's program to have it perform a different movement sequence. Experiment a little bit. Then save the scene under a different name, and reload it. Notice how the robot language program modification was also saved.</p>
<p>The MTB robots are handled in following way:</p>

<li>
the actual robot language program is compiled and executed by the &quot;mtbServer&quot; application. That application also holds the MTB robot's state variables. For each MTB robot in the simulation scene, there will be an instance of the &quot;mtbServer&quot; application launched by the &quot;v_repExtMtb&quot; plugin.
</li>
<li>
the &quot;v_repExtMtb&quot; plugin handles the user interface (i.e. the MTB robot dialog). It is also in charge of providing custom Lua functions, and handles attaching custom data to scene objects: indeed, the robot language programs are saved/loaded together with scene objects, in the same file! The plugin also  launches the &quot;mtbServer&quot; application when needed, and communicates with it via socket communication.</li>
<li>
the child scripts attached to &quot;MTB_Robot&quot; and &quot;MTB_Robot#0&quot; check whether the &quot;v_repExtMtb&quot; plugin is loaded, update the custom user interfaces for each robot, and control the robot language execution.
</li>



<p>The MTB robot and its simple robot language is a simple prototype meant to demonstrate how to integrate a robot language interpreter into V-REP. It is very easy to extend current functionality for much more complex robots or robot languages. All what is needed is:<br>
</p>

<li>Building the <a href="models.htm">model</a> of the robot. This includes <a href="importExport.htm">importing CAD data</a>, adding <a href="joints.htm">joints</a>, etc. This step can be entirely done in V-REP.<br>
</li>

<li>Writing a <a href="plugins.htm">plugin</a> to handle the new robot natively, i.e. to handle the new robot by interpreting its own robot language. Any language capable of accessing C-API functions and capable of being wrapped in a dll can be used to create the plugin (but c/c++ is preferred). The robot language interpreter could be directly embedded in the plugin, or launched as an external application (&quot;mtbServer&quot;) as is done in this tutorial.<br>
</li>

<li>Writing a small <a href="childScripts.htm">child script</a> responsible for handling <a href="customUserInterfaces.htm">custom dialogs</a> and linking the robot with the plugin. This step can be entirely done in V-REP.<br>
</li>


<p>Now let's have a look at the MTB's plugin project. There is one prerequisites to embedding a robot language interpreter (or other emulator) into V-REP:<br>
</p>

<li>The robot language interpreter should be able to be executed several times in parallel. This means that several interpreter instances should be supported, in order to support several identical, in-parallel operating robots. This can be handled the easiest by launching a new interpreter for each new robot, as is done in this tutorial.<br>
</li>

<p>When writing any plugin, make sure that the plugin accesses V-REP's <a href="apiOverview.htm">regular API</a> only from the main thread (or from a thread created by V-REP)! The plugin can launch new threads, but in that case those new threads should not be used to access V-REP (they can however be used to communicate with a server application, to communicate with some hardware, to execute background calculations, etc.). This limitation will be relaxed in future.<br>
</p>

<p>Following section describes each file contained in the MTB plugin project. The project files themselves contain many comments that help understand its architecture:<br>
</p>
<br>

<table class=subsectionTable><tr class=subsectionTd><td class=subsectionTd>&quot;v_repExtMtb.h&quot; and &quot;v_repExtMtb.cpp&quot;</td></tr></table> 

<p>Those files contain the 3 required dll entry points for V-REP: &quot;v_repStart&quot;, &quot;v_repEnd&quot; and &quot;v_repMessage&quot;. Refer to the section on <a href="plugins.htm">plugins</a> for more details. <br>
</p>

<li>In &quot;v_repStart&quot;, the plugin is initialized (when V-REP is launched) and 9 custom Lua commands are registered (&quot;simExtMtbReset&quot;, &quot;simExtMtbRun&quot;, &quot;simExtMtbGetInput&quot;, &quot;simExtMtbSetInput&quot;, &quot;simExtMtbGetOutput&quot;, &quot;simExtMtbGetJoints&quot;, &quot;simExtMtbGetAutoStart&quot;, &quot;simExtMtbConnectInput&quot; and &quot;simExtMtbDisconnectInput&quot;). This allows a script (or child script) to <em>call back</em> the plugin with specific parameters and/or to retrieve data from the plugin. Open the child script attached to the MTB robot and try to locate where those custom Lua commands are called.<br>
</li>

<li>In &quot;v_repEnd&quot;, the plugin releases all resources and memory. This happens when the V-REP application ends.<br>
</li>

<li>In &quot;v_repMessage&quot;, the plugin handles various messages from V-REP (toggle the plugin dialog, etc.)<br>
</li>

<li>&quot;LUA_RESET_CALLBACK&quot; is the function that is called (<em>called-back</em>) when &quot;simExtMtbReset&quot; is called in the child script. When this function is called, the plugin first needs to figure out for which MTB robot it is called, then relays the call to the appropriate plugin MTB object for execution. This function will reset the robot language interpreter for the specified robot.<br>
</li>

<li>&quot;LUA_RUN_CALLBACK&quot; is the function that is called (<em>called-back</em>) when &quot;simExtMtbRun&quot; is called in the child script. When this function is called, the plugin first needs to figure out for which MTB robot it is called, then relays the call to the appropriate plugin MTB object for execution. This function will run the robot language interpreter for the specified robot.<br>
</li>

<li>&quot;LUA_GET_INPUT_CALLBACK&quot; is the function that is called (<em>called-back</em>) when &quot;simExtMtbGetInput&quot; is called in the child script. When this function is called, the plugin first needs to figure out for which MTB robot it is called, then relays the call to the appropriate plugin MTB object for execution. This function will read 4 bytes of the robot's input port.<br>
</li>

<li>&quot;LUA_SET_INPUT_CALLBACK&quot; is the function that is called (<em>called-back</em>) when &quot;simExtMtbSetInput&quot; is called in the child script. When this function is called, the plugin first needs to figure out for which MTB robot it is called, then relays the call to the appropriate plugin MTB object for execution. This function will write 4 bytes to the robot's input port.<br>
</li>

<li>&quot;LUA_GET_OUTPUT_CALLBACK&quot; is the function that is called (<em>called-back</em>) when &quot;simExtMtbGetOutput&quot; is called in the child script. When this function is called, the plugin first needs to figure out for which MTB robot it is called, then relays the call to the appropriate plugin MTB object for execution. This function will read 4 bytes of the robot's output port.<br>
</li>

<li>&quot;LUA_GET_JOINTS_CALLBACK&quot; is the function that is called (<em>called-back</em>) when &quot;simExtMtbGetJoints&quot; is called in the child script. When this function is called, the plugin first needs to figure out for which MTB robot it is called, then relays the call to the appropriate plugin MTB object for execution. This function will read the state of the robot's 4 axes (joint values).<br>
</li>

<li>&quot;LUA_GET_AUTO_START_CALLBACK&quot; is the function that is called (<em>called-back</em>) when &quot;simExtMtbGetAutoStart&quot; is called in the child script. When this function is called, the plugin first needs to figure out for which MTB robot it is called, then relays the call to the appropriate plugin MTB object for execution. This function will check whether the specified robot should automatically start executing its robot language program at simulation start.<br>
</li>

<li>&quot;LUA_CONNECT_INPUT_CALLBACK&quot; is the function that is called (<em>called-back</em>) when &quot;simExtMtbConnectInput&quot; is called in the child script. When this function is called, the plugin first needs to figure out for which MTB robots it is called. The function connects a robot's output port bit, to another robot's input port bit.<br>
</li>

<li>&quot;LUA_DISCONNECT_INPUT_CALLBACK&quot; is the function that is called (<em>called-back</em>) when &quot;simExtMtbDisconnectInput&quot; is called in the child script. When this function is called, the plugin first needs to figure out for which MTB robot it is called. The function disconnects a bit of the robot's input port.<br>
</li>

<br>
<br>
<table class=subsectionTable><tr class=subsectionTd><td class=subsectionTd>&quot;mtbGlobal.h&quot;</td></tr></table> 

<p>&quot;mtbGlobal.h&quot; contains 2 important types of data: the developer header and some data tags. Both are used to attach custom data to <a href="objects.htm">scene objects</a> (custom data is saved and loaded with scene objects, so this represents a way for a plugin to save custom data with a scene or model). Also refer to the <a href="pluginTutorial.htm">tutorial on plugins</a> for more details.<br>
</p>

<li>DEVELOPER_DATA_HEADER: this integer number identifies the company or developer of a plugin. If the same company or the same developer produces several plugins, then the same DEVELOPER_DATA_HEADER should be used. Best is to use the serial number of your first V-REP copy. It is important that you always use the same number, so that your data and other developer's data don't collide.<br>
</li>

<li>data tags: data tags are integer numbers that identify different types of custom data saved under a same developer header. For instance, the MTB_PROGRAM tag identifies data that represents an MTB robot's robot language program.<br>
</li>
<br>
<br>
<table class=subsectionTable><tr class=subsectionTd><td class=subsectionTd>&quot;Access.h&quot; and &quot;Access.cpp&quot;</td></tr></table>

<p>Represents a static class that holds the plugin's main objects (e.g. dialog &amp; object container). Following routines/data structures are important:<br>
</p>

<li>
&quot;mtbRobotDialog&quot;: the dialog of the plugin </li>

<li>&quot;mtbRobotContainer&quot;: the &quot;mtbRobotContainer&quot; of V-REP's current scene.<br>
</li>
<li>&quot;insertSerializationData&quot; and &quot;extractSerializationData&quot;: functions used to pack several types of data under a same developer header. Refer to the <a href="pluginTutorial.htm">tutorial on plugins</a> for more details.<br>
</li>
<br>
<br>
<table class=subsectionTable><tr class=subsectionTd><td class=subsectionTd>&quot;mtbRobotContainer.h&quot; and &quot;mtbRobotContainer.cpp&quot;</td></tr></table> 

<p>
Represents a container that holds all instances of CMtbRobot for the current scene:
</p>

<li>
&quot;_allMtbRobots&quot;: all instances of CMtbRobot </li>

<li>&quot;actualizeForSceneContent&quot;: this function synchronizes objects from V-REP with objects from the plugin; for each MTB robot in the scene, there must be a related CMtbRobot instance in the plugin. When for example the user copy/pastes an MTB robot in the scene, then this function will recognize that a new MTB robot is in the scene, and automatically add a related CMtbRobot instance. In a similar way, if the user deletes an MTB robot in the scene, then this function will remove its related CMtbRobot instance. Following figure illustrates how the plugin should keep its state synchronized with V-REP (the figure corresponds to 2 MTB robots in scene 1, and to 4 MTB robots in scene 2):<br>
</li>

<p align=center><img src="images/robLangTut9.jpg"></p>
<br>

<table class=subsectionTable><tr class=subsectionTd><td class=subsectionTd>&quot;mtbRobot.h&quot; and &quot;mtbRobot.cpp&quot;</td></tr></table> 

<p>
Represents an MTB robot related to an MTB robot in the scene (see the figure above).
</p>

<li>&quot;attachCustomDataToSceneObject&quot; and &quot;readCustomDataFromSceneObject&quot;. Those two functions are in charge of transferring custom data between an MTB robot and its related plugin instance CMtbRobot. If the user changes the robot language program of a given MTB robot, then &quot;attachCustomDataToSceneObject&quot; will be called, in order to actualize the custom data (so that if the user saves the scene, the newest robot language program will also be saved).<br>
</li>

<li>&quot;run&quot;: calling this function will execute the robot language program of the related MTB robot for &quot;timeStep&quot; seconds, then give control back to V-REP. The function itself will communicate (through socket or pipe communication) with an instance of &quot;mtbServer&quot; (see further below).<br>
</li>
<br>
<br>
<table class=subsectionTable><tr class=subsectionTd><td class=subsectionTd>&quot;outConnection.h&quot; and &quot;outConnection.cpp&quot;</td></tr></table> 

<p>This is the code that handles the socket or pipe communication with &quot;mtbServer&quot;. The communication is handled as a client.<br>
</p>
<br>
<table class=subsectionTable><tr class=subsectionTd><td class=subsectionTd>&quot;mtbRobotDialog.h&quot; and &quot;mtbRobotDialog.cpp&quot;</td></tr></table> 
<br>
<p>This is the code that handles the MTB plugin dialog that can be accessed with [Menu bar --&gt; Plugins --&gt; MTB Robot Properties].<br>
</p>


<br>
<br>
<p>
The actual robot program execution is handled by the &quot;mtbServer&quot; application. For each robot in the scene, an instance of &quot;mtbServer&quot; is launched, and connects to V-REP via socket communication. Following are the main files in the &quot;mtbServer&quot; project:</p>
<li>
&quot;inConnection.h&quot; and &quot;inConnection.cpp&quot;: handles the socket communication as a server:
</li>
<li>
&quot;robotLanguageInterpreter.h&quot; and &quot;robotLanguageInterpreter.cpp&quot;: this is the actual code that executes a robot language program. It also holds the configuration state of an MTB robot.
</li>
<li>
&quot;mtbServer.cpp&quot;: this code is in charge of communicating with the &quot;v_repExtMtb&quot; plugin and relaying commands to the robot language interpreter (see above)
</li>

<br>
<br>



<p>Now let's have a look at the child script that is attached to the MTB robot. The code might seem quite long or complicated. However most functionality handled in the child script could also be directly handled in the plugin, making the child script much smaller/cleaner. The advantage in handling most functionality in the child script is that modifications can be performed without having to recompile the plugin!<br>
</p>

<p>Following is the MTB robot's child script main functionality:<br>
</p>

<li>
Checking whether the plugin was loaded. If not, an error message is output.</li>

<li>Communicating with the plugin. This means that information is sent to and received from the MTB plugin with the custom Lua functions (see above).<br>
</li>

<li>Applying the newly calculated joint values to the MTB robot model. This could also be handled in the MTB's plugin.<br>
</li>

<li>Reacting to events on the custom dialogs (<a href="customUserInterfaces.htm">custom user interfaces</a>), like button presses. This could also be handled in the MTB's plugin.<br>
</li>

<li>Updating the state of the custom dialogs (custom user interfaces), by changing their visual appearance (e.g. displaying the current joint positions, etc.). This could also be handled in the MTB's plugin.<br>
</li>

<p>The most important instruction is following: <br>
</p>

<pre class=lightRedBox>
result,cmdMessage,newJointPositions=simExtMtbRun(robotHandle,dt)</pre>

<p>It will execute the robot language program attached to the MTB robot for dt seconds. It is called at each simulation pass, and the robot language program is executed in a stepped fashion.<br>
</p>

<p>If the robot language program interpreter could trigger intermediate events that should be handled by V-REP, the above instruction could be handled in an equivalent way with following instructions:<br>
</p>

<pre class=lightRedBox>while (dt&gt;0) do<br>    result,dt,cmdMessage,newJointPositions=simExtMtbRun(robotHandle,dt)<br>    event=simExtMtbGetEvent()<br>    while (event~=-1) do<br>        -- handle events here<br>        event=simExtMtbGetEvent()<br>    end<br>end</pre>

<p>In that case, the return values of the &quot;simExtMtbRun&quot; should include the remaining execution time, and a new custom Lua function should be registered to retrieve events (&quot;simExtMtbGetEvent&quot;).<br>
</p>





<br>
<br>

 </tr>
</table> 
</div>  
  
  
</body>

</html>
